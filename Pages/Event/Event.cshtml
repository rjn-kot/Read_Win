@page

@model Read_Win.Pages.Event.EventModel
@{
    ViewData["Title"] = "Мероприятия";
    ViewData["Subtitle"] = "Мероприятия\u2007";
    ViewData["ActivePage"] = "Event";
    ViewData["AddTexst"] = "Создать мероприятие";
}
@Html.AntiForgeryToken()
<div class="d-flex align-items-center">
    <span class="Top_Top fst-normal">@ViewData["Subtitle"]</span>
    @{
        var defaultOpt = ViewData["DefaultOption"] as string ?? Model.SchoolYears.FirstOrDefault()?.Period;
    }
    <div class="dropdown d-inline">
        <button class="btn p-0 border-0 bg-transparent dropdown-toggle"
                type="button"
                id="textDropdown"
                data-bs-toggle="dropdown"
                aria-expanded="false"
                style="font: inherit; color: inherit; box-shadow: none;">
            <span id="selectedOption">@defaultOpt</span>
        </button>
        <ul class="dropdown-menu" aria-labelledby="textDropdown">
            @foreach (var year in Model.SchoolYears)
            {
                <li>
                    <a class="dropdown-item @(year.Period == defaultOpt ? "active" : "")"
                       href="#"
                       data-value="@year.Period">
                        @year.Period
                    </a>
                </li>
            }
        </ul>
    </div>
</div>

<div class="center-content">
    <div class="text-center mb-3">
        <h1 class="rating-title">@ViewData["Title"] <span id="currentPeriod">@defaultOpt</span></h1>
    </div>

    <div class="d-flex justify-content-end mb-3">
        <button class="btn" id="ButAdd" data-bs-toggle="modal" data-bs-target="#addEventModal">
            <img src="~/image/icons8-добавить-16.png" alt="Добавить" class="btn-icon">
            @ViewData["AddTexst"]
        </button>
    </div>
    <div class="container">
        <div id="EventContent">
            <partial name="_EventPartial" model="Model.Events" />
        </div>
    </div>
</div>

@await Html.PartialAsync("_ModalEventPartial")
@await Html.PartialAsync("_ModalAddPartial")

<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">Успех</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Закрыть"></button>
        </div>
        <div class="toast-body">
            Сообщение появится здесь!
        </div>
    </div>
</div>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
    // Обработчик для dropdown
    document.querySelectorAll('.dropdown-item').forEach(item => {
        item.addEventListener('click', function(e) {
            e.preventDefault();
            document.querySelectorAll('.dropdown-item').forEach(el => {
                el.classList.remove('active');
            });
            this.classList.add('active');

            const selectedOption = document.getElementById('selectedOption');
            if(selectedOption) {
                selectedOption.textContent = this.textContent;
            }

            const currentPeriodElement = document.getElementById('currentPeriod');
            if(currentPeriodElement) {
                currentPeriodElement.textContent = this.textContent;
            }

            const period = this.dataset.value;

            // Показываем индикатор загрузки
            const eventContent = document.getElementById('EventContent');
            eventContent.innerHTML = '<div class="text-center"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></div>';

            // AJAX-запрос для фильтрации мероприятий
            fetch(`?handler=FilterEvents&period=${encodeURIComponent(period)}`, {
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.text();
            })
            .then(html => {
                eventContent.innerHTML = html;
                initEventTableHandlers();
            })
            .catch(error => {
                console.error('Error:', error);
                eventContent.innerHTML = '<div class="alert alert-danger">Ошибка при загрузке данных</div>';
            });
        });
    });

        // Обработчик для кнопки "Создать мероприятие"
        document.getElementById('ButAdd')?.addEventListener('click', function() {
            const modal = new bootstrap.Modal(document.getElementById('addEventModal'));
            modal.show();
        });

        // Инициализация обработчиков таблицы событий
        function initEventTableHandlers() {
            document.querySelectorAll('.event-classes-row').forEach(row => {
                row.addEventListener('click', function() {
                    const eventData = JSON.parse(this.getAttribute('data-event'));

                    // Заполнение модального окна
                    const modal = new bootstrap.Modal(document.getElementById('eventModal'));
                    modal.show();
                });
            });
        }

        // Первоначальная инициализация
        initEventTableHandlers();

        // Oбработка закрытия модальных окон
        const addEventModal = document.getElementById('addEventModal');
        if (addEventModal) {
            addEventModal.addEventListener('hidden.bs.modal', function() {
                cleanUpAfterModal();
            });
        }

        const eventModal = document.getElementById('eventModal');
        if (eventModal) {
            eventModal.addEventListener('hidden.bs.modal', function() {
                cleanUpAfterModal();
            });
        }

        function cleanUpAfterModal() {
            // Удаляем все бэкдропы
            const backdrops = document.querySelectorAll('.modal-backdrop');
            backdrops.forEach(backdrop => backdrop.remove());

            // Восстанавливаем состояние body
            document.body.style.overflow = 'auto';
            document.body.style.paddingRight = '0';
            document.body.classList.remove('modal-open');
        }
    document.getElementById('saveEventButton')?.addEventListener('click', async function() {
        try {
            // Валидация формы
            const form = document.getElementById('eventForm');
            if (form) {
                form.classList.add('was-validated');
                if (!form.checkValidity()) return;
            }

        // Собираем данные классов и произведений
        const classWorks = [];
        const workInputs = document.querySelectorAll('.book-name');
        let hasEmptyWorks = false;

        workInputs.forEach(input => {
            if (!input.value.trim()) {
                input.classList.add('is-invalid');
                hasEmptyWorks = true;
            } else {
                classWorks.push({
                    classParallel: parseInt(input.dataset.class),
                    bookName: input.value.trim()
                });
            }
        });

        if (hasEmptyWorks || classWorks.length === 0) {
            document.getElementById('classError').style.display = 'block';
            return;
        }

        // Собираем данные мероприятия
        const eventData = {
            Name: document.getElementById('eventName').value,
            Date: formatDateTimeForServer(document.getElementById('eventDate').value),
            Type: document.getElementById('eventType').options[document.getElementById('eventType').selectedIndex].text,
            Description: document.getElementById('eventDescription').value,
            ClassWorks: classWorks
        };

            console.log('Отправляемые данные:', eventData);

            // Отправка данных
            const response = await fetch('/Event/Event?handler=CreateEvent', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(eventData)
            });

            // Обработка ответа
            if (!response.ok) {
                const error = await response.text();
                throw new Error(error || 'Ошибка при сохранении');
            }
    // Показываем уведомление об успехе
            showToast('success', 'Мероприятие успешно создано!');

            // Закрываем модальное окно
            const modal = bootstrap.Modal.getInstance(document.getElementById('addEventModal'));
            if (modal) {
                modal.hide();
            }

            // Получаем текущий период из выпадающего списка
            const period = document.getElementById('selectedOption').textContent;

            // Обновляем таблицу мероприятий через AJAX
            const eventContent = document.getElementById('EventContent');
            eventContent.innerHTML = '<div class="text-center"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></div>';

            try {
                const refreshResponse = await fetch(`?handler=FilterEvents&period=${encodeURIComponent(period)}`, {
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                if (!refreshResponse.ok) throw new Error('Ошибка при загрузке данных');

                eventContent.innerHTML = await refreshResponse.text();
                initEventTableHandlers();

                // Очищаем форму
                if (form) {
                    form.reset();
                    form.classList.remove('was-validated');
                }
            } catch (error) {
                console.error('Error:', error);
                eventContent.innerHTML = '<div class="alert alert-danger">Ошибка при обновлении списка мероприятий</div>';
            }

        } catch (error) {
            console.error('Ошибка:', error);
            showToast('error', error.message);
        }
    });
    // Функция для преобразования даты в нужный формат
    function formatDateTimeForServer(dateTimeString) {
        if (!dateTimeString) return '';

        // Преобразуем строку в объект Date
        const date = new Date(dateTimeString);

        // Форматируем дату в нужный формат: "dd.MM.yyyy HH:mm:ss"
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        const seconds = String(date.getSeconds()).padStart(2, '0');

        return `${day}.${month}.${year} ${hours}:${minutes}:${seconds}`;
    }

        // Функция для показа toast-уведомлений
    function showToast(type, message) {
        const toastContainer = document.getElementById('toastContainer') || createToastContainer();

        // Определяем стили в зависимости от типа
        const bgClass = type === 'success' ? 'bg-success' : 'bg-danger';
        const title = type === 'success' ? 'Успех!' : 'Ошибка!';

        const toastEl = document.createElement('div');
        toastEl.className = `toast show ${bgClass} text-white`;
        toastEl.role = 'alert';
        toastEl.setAttribute('aria-live', 'assertive');
        toastEl.setAttribute('aria-atomic', 'true');

        toastEl.innerHTML = `
            <div class="toast-header">
                <strong class="me-auto">${title}</strong>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                ${message}
            </div>
        `;

        toastContainer.appendChild(toastEl);

        // Автоматическое скрытие через 10 секунд
        setTimeout(() => {
            const bsToast = new bootstrap.Toast(toastEl);
            bsToast.hide();
            toastEl.addEventListener('hidden.bs.toast', () => {
                toastEl.remove();
            });
        }, 10000);
    }

    function createToastContainer() {
        const container = document.createElement('div');
        container.id = 'toastContainer';
        container.className = 'position-fixed bottom-0 end-0 p-3';
        container.style.zIndex = '1100';
        document.body.appendChild(container);
        return container;
    }
    });
    </script>